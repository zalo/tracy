name: python

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-13, macos-14] #ubuntu-latest, 

    steps:
      - uses: actions/checkout@v4

      # Install Dependencies
      - if: startsWith(matrix.os, 'windows')
        uses: microsoft/setup-msbuild@v2
      - uses: actions/setup-python@v5
      - if: startsWith(matrix.os, 'windows')
        run: pip install meson ninja
      - if: startsWith(matrix.os, 'macos')
        name: Install macos dependencies
        run: brew install pkg-config glfw meson
      #- if: startsWith(matrix.os, 'ubuntu')
      #  name: Install dependencies
      #  run: pacman -Syu --noconfirm && pacman -S --noconfirm --needed freetype2 tbb debuginfod wayland dbus libxkbcommon libglvnd meson cmake git wayland-protocols nodejs

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.20.0

      #- name: Profiler GUI
      #  run: |
      #    cmake -B profiler/build -S profiler -DCMAKE_BUILD_TYPE=Release
      #    cmake --build profiler/build --parallel --config Release
      #- name: Update utility
      #  run: |
      #    cmake -B update/build -S update -DCMAKE_BUILD_TYPE=Release
      #    cmake --build update/build --parallel --config Release
      #- name: Capture utility
      #  run: |
      #    cmake -B capture/build -S capture -DCMAKE_BUILD_TYPE=Release
      #    cmake --build capture/build --parallel --config Release
      #- name: Csvexport utility
      #  run: |
      #    cmake -B csvexport/build -S csvexport -DCMAKE_BUILD_TYPE=Release
      #    cmake --build csvexport/build --parallel --config Release
      #- name: Import utilities
      #  run: |
      #    cmake -B import/build -S import -DCMAKE_BUILD_TYPE=Release
      #    cmake --build import/build --parallel --config Release

      - name: Python Package
        run: |
          mkdir build
          cd build
          cmake -DTRACY_STATIC=OFF -DTRACY_CLIENT_PYTHON=ON ../

      - if: ${{ !startsWith(matrix.os, 'windows') }}
        name: Library
        run: meson setup -Dprefix=$GITHUB_WORKSPACE/bin/lib build && meson compile -C build && meson install -C build

      - name: Build wheels
        run: |
          cd python
          python -m cibuildwheel --output-dir wheelhouse

        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./python/wheelhouse/*.whl
